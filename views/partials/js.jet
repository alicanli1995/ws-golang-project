<script src="/static/admin/js/pusher.min.js"></script>

<script>
  let pusher = new Pusher("{{.PreferenceMap["pusher-key"]}}", {
    authEndPoint: "/pusher/auth",
    wsHost: "localhost",
    wsPort: 4001,
    forceTLS: false,
    enabledTransports: ["ws", "wss"],
    disabledTransports: []
  });

  let publicChannel = pusher.subscribe("public-channel");
  let privateChannel = pusher.subscribe("private-channel-{{.User.ID}}")

  privateChannel.bind("private-message", function (data) {
    attention.toast({
      msg: data.message,
      icon: 'success',
    })
  })

  publicChannel.bind("app-starting", function (data) {
    let toggle = document.getElementById("monitoring-live");
    toggle.checked = true;
    successAlert(data.message);
  })

  publicChannel.bind("app-stopping", function (data) {
    warningAlert(data.message);
    let toggle = document.getElementById("monitoring-live");
    toggle.checked = false;
    let scheduledTableExist = !!document.getElementById("schedule-table");
    if (scheduledTableExist) {
      let tableRef = document.getElementById("schedule-table");
      tableRef.tBodies[0].innerHTML = "";

      let newRow = tableRef.tBodies[0].insertRow(-1);
      let newCell = newRow.insertCell(0);
      newCell.setAttribute("colspan", "5");
      newCell.innerHTML = "No scheduled checks";
    }
  })

  publicChannel.bind("schedule-changed-event", function (data) {
    let scheduledTableExist = !!document.getElementById("schedule-table");
    if (scheduledTableExist) {
      let tableRef = document.getElementById("schedule-table");

      let tableContent = tableRef.innerHTML;

      if (tableContent.includes("No scheduled checks")) {
        let rowCount = tableRef.rows.length;
        for (let i = rowCount - 1; i > 0; i--) {
          tableRef.deleteRow(i);
        }
      }

      // delete existing row
      let exists = !!document.getElementById("schedule-" + data.host_service_id);
      if (exists) {
        let row = document.getElementById("schedule-" + data.host_service_id);
        row.parentNode.removeChild(row);
      }

      // add in the new row
      let newRow = tableRef.tBodies[0].insertRow(-1);
      newRow.setAttribute("id", "schedule-" + data.host_service_id);

      let newCell = newRow.insertCell(0);
      let newText = document.createTextNode(data.host);
      newCell.appendChild(newText);

      let newCell2 = newRow.insertCell(1);
      let newText2 = document.createTextNode(data.service);
      newCell2.appendChild(newText2);

      let newCell3 = newRow.insertCell(2);
      let newText3 = document.createTextNode(data.schedule);
      newCell3.appendChild(newText3);

      let newCell4 = newRow.insertCell(3);
      let newText4 = document.createTextNode(data.last_run);
      newCell4.appendChild(newText4);

      let newCell5 = newRow.insertCell(4);
      if (data.next_run === undefined) {
        newText = document.createTextNode("Pending...");
      } else {
        newText = document.createTextNode(data.next_run);
      }
      newCell5.appendChild(newText);


    }
  })

  publicChannel.bind("schedule-item-removed-event", function (data) {
    let rowExist = !!document.getElementById("schedule-" + data.host_service_id);
    if (rowExist) {
      let tableRef = document.getElementById("schedule-" + data.host_service_id);
      tableRef.parentNode.removeChild(tableRef);

      // if this was the last row, add a "no services" row
      // we don't know what table might exist, so check them all
      let currentTable = document.getElementById("schedule-table");
      if (currentTable.rows.length === 1) {
        // add in a "No services" row with colspan 3
        let newRow = currentTable.tBodies[0].insertRow(-1);
        let newCell = newRow.insertCell(0);
        newCell.setAttribute("colspan", "5");
        newCell.innerHTML = "No scheduled checks";
      }
    }
  })

  publicChannel.bind("host-service-status-changed", function (data) {
    attention.toast({
      msg: data.message,
      icon: 'info',
      timer: 30000,
      showCloseButton: true,
    })

    deleteHostServiceRow(data.host_service_id);

    updateHostServiceTable(data);
  })

  function updateHostServiceTable(data) {
    // update the tables, if the row exists, update it, if not, add it
    let table = !!document.getElementById(data.status + "-table");
    if (table) {
      let tableRef = document.getElementById(data.status + "-table");
      let newRow = tableRef.tBodies[0].insertRow(-1);
      newRow.setAttribute("id", "host-service-" + data.host_service_id);
      let newCell = newRow.insertCell(0);
      newCell.innerHTML = `
            <span class="${data.icon}"></span>
            ${data.service_name}
            <span class="badge bg-secondary pointer" onclick="checkNow(data.host_service_id, '${data.status}')">Check Now</span>
      `;

      let newCell2 = newRow.insertCell(1);
      if (data.status !== 'pending') {
        newCell2.innerHTML = `
           ${data.last_check}
        `;
      } else {
        newCell2.innerHTML = `
            Pending...
        `;
      }

      let newCell3 = newRow.insertCell(2);

    }
  }

  function deleteHostServiceRow(hostServiceID) {
    // remove existing table row if it exists
    let exists = !!document.getElementById("host-service-" + hostServiceID);
    if (exists) {
      let row = document.getElementById("host-service-" + hostServiceID);
      row.parentNode.removeChild(row);

      // if this was the last row, add a "no services" row
      // we don't know what table might exist, so check them all

      // first, set up an array with the appropriate status names
      let tables = ["healthy", "pending", "warning", "problem"];

      for (let i = 0; i < tables.length; i++) {
        // check to see if the table exists
        let currentTableExists = !!document.getElementById(tables[i] + "-table");
        if (currentTableExists) {
          // the table exists, so get a reference to it
          let currentTable = document.getElementById(tables[i] + "-table");

          // if the number of rows in the table is one, the only row left is the header,
          // so we need to insert a  "No services" row in the table body
          if (currentTable.rows.length === 1) {
            // add in a "No services" row with colspan 3
            let newRow = currentTable.tBodies[0].insertRow(-1);
            let newCell = newRow.insertCell(0);
            newCell.setAttribute("colspan", "3");
            newCell.innerHTML = "No services";
          }
        }
      }
    }
  }

  publicChannel.bind("host-service-count-changed", function (data) {
    let healthyCountExist = !!document.getElementById("healthy_count");
    if (healthyCountExist) {
      document.getElementById("healthy_count").innerHTML = data.healthy_count;
      document.getElementById("problem_count").innerHTML = data.problem_count;
      document.getElementById("warning_count").innerHTML = data.warning_count;
      document.getElementById("pending_count").innerHTML = data.pending_count;
    }
  })

  let attention = Prompt();

  {{if .Flash != ""}}
  successAlert('{{.Flash}}')
  {{end}}

  {{if .Warning != ""}}
  warningAlert('{{.Warning}}')
  {{end}}

  {{if .Error != ""}}
  errorAlert('{{.Error}}')
  {{end}}


  document.addEventListener("DOMContentLoaded", function () {
    let tabMap = new Map();
    let tabs = document.querySelectorAll('[data-toggle="tab"]');
    let i = 0;
    Array.prototype.filter.call(tabs, function (el) {
      el.addEventListener("click", function () {
        history.pushState("", document.title, window.location.pathname);
        localStorage.setItem('activeTab', el.getAttribute("data-target"));
      })

      tabMap.set(el.getAttribute("href"), i);
      i++;
    });

    if (!window.location.hash) {
      let activeTab = localStorage.getItem('activeTab');
      if (activeTab) {
        document.querySelectorAll('[data-toggle="tab"]')[activeTab].Tab.show()
      }
    } else {
      if (tabMap.has(window.location.hash)) {
        document.querySelectorAll('[data-toggle="tab"]')[tabMap.get(
            window.location.hash)].Tab.show()
      }
    }

    document.getElementById("monitoring-live").addEventListener("change", function () {
      let enabled = document.getElementById("monitoring-live").checked;
      if (!enabled) {
        attention.confirm({
          html: "Are you sure you want to disable live monitoring?",
          callback: function (result) {
            if (result) {
              updateSystemPref("monitoring_live", "0")
              toggleMonitoring(false);
            } else {
              document.getElementById("monitoring-live").checked = true;
            }
          }
        })
      } else {
        updateSystemPref("monitoring_live", "1")
        toggleMonitoring(true);
      }
    })
  });

  function updateSystemPref(prefName, prefValue) {
    let formData = new FormData();
    formData.append("pref_name", prefName);
    formData.append("pref_value", prefValue);
    formData.append("csrf_token", "{{.CSRFToken}}");

    let ajax = new XMLHttpRequest();
    ajax.responseType = "json";
    ajax.open("POST", "/admin/preferences/ajax/set-system-pref");
    ajax.send(formData);

    ajax.onreadystatechange = function () {
      if (ajax.readyState === XMLHttpRequest.DONE) {
        let response = ajax.response;
        if (!response.ok) {
          errorAlert(response.message);
        }
      }
    }
  }

  function toggleMonitoring(enabled) {
    let formData = new FormData();
    formData.append("enabled", enabled);
    formData.append("csrf_token", "{{.CSRFToken}}");

    let ajax = new XMLHttpRequest();
    ajax.responseType = "json";
    ajax.open("POST", "/admin/preferences/ajax/toggle-monitoring");
    ajax.send(formData);

    ajax.onreadystatechange = function () {
      if (ajax.readyState === XMLHttpRequest.DONE) {
        let response = ajax.response;
        if (!response.ok) {
          errorAlert(response.message);
        }
      }
    }
  }

</script>
