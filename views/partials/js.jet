<script src="/static/admin/js/pusher.min.js"></script>

<script>
  let pusher = new Pusher("{{.PreferenceMap["pusher-key"]}}", {
    authEndPoint: "/pusher/auth",
    wsHost: "localhost",
    wsPort: 4001,
    forceTLS: false,
    enabledTransports: ["ws", "wss"],
    disabledTransports: []
  });

  let publicChannel = pusher.subscribe("public-channel");

  publicChannel.bind("app-starting", function (data) {
    successAlert(data.message);
  })

  publicChannel.bind("app-stopping", function (data) {
    warningAlert(data.message);
  })

  publicChannel.bind("host-service-status-changed", function (data) {
    attention.toast({
      msg: data.message,
      icon: 'info',
      timer: 30000,
      showCloseButton: true,
    })

    // update tables

    // remove existing row
    let exists = !!document.getElementById("host-service-" + data.host_service_id);
    if (exists) {
      console.log("removing row")
      let row = document.getElementById("host-service-" + data.host_service_id);
      row.parentNode.removeChild(row);
    }

    // update the tables, if the row exists, update it, if not, add it
    let table = !!document.getElementById(data.status + "-table");
    if (table) {
      let tableRef = document.getElementById(data.status + "-table");
      let newRow = tableRef.tBodies[0].insertRow(-1);
      newRow.setAttribute("id", "host-service-" + data.host_service_id);
      let newCell = newRow.insertCell(0);
      newCell.innerHTML = `
            <span class="${data.icon}"></span>
            ${data.service_name}
            <span class="badge bg-secondary pointer" onclick="checkNow(data.host_service_id, '${data.status}')">Check Now</span>
      `;

      let newCell2 = newRow.insertCell(1);
      if (data.status !== 'pending') {
        newCell2.innerHTML = `
           ${data.last_check}
        `;
      } else {
        newCell2.innerHTML = `
            Pending...
        `;
      }

      let newCell3 = newRow.insertCell(2);


    }
  })

  publicChannel.bind("host-service-count-changed", function (data) {
    let healthyCountExist = !!document.getElementById("healthy_count");
    if (healthyCountExist) {
      document.getElementById("healthy_count").innerHTML = data.healthy_count;
      document.getElementById("problem_count").innerHTML = data.problem_count;
      document.getElementById("warning_count").innerHTML = data.warning_count;
      document.getElementById("pending_count").innerHTML = data.pending_count;
    }
  })

  let attention = Prompt();

  {{if .Flash != ""}}
  successAlert('{{.Flash}}')
  {{end}}

  {{if .Warning != ""}}
  warningAlert('{{.Warning}}')
  {{end}}

  {{if .Error != ""}}
  errorAlert('{{.Error}}')
  {{end}}


  document.addEventListener("DOMContentLoaded", function () {
    let tabMap = new Map();
    let tabs = document.querySelectorAll('[data-toggle="tab"]');
    let i = 0;
    Array.prototype.filter.call(tabs, function (el) {
      el.addEventListener("click", function () {
        history.pushState("", document.title, window.location.pathname);
        localStorage.setItem('activeTab', el.getAttribute("data-target"));
      })

      tabMap.set(el.getAttribute("href"), i);
      i++;
    });

    if (!window.location.hash) {
      let activeTab = localStorage.getItem('activeTab');
      if (activeTab) {
        document.querySelectorAll('[data-toggle="tab"]')[activeTab].Tab.show()
      }
    } else {
      if (tabMap.has(window.location.hash)) {
        document.querySelectorAll('[data-toggle="tab"]')[tabMap.get(
            window.location.hash)].Tab.show()
      }
    }

    document.getElementById("monitoring-live").addEventListener("change", function () {
      let enabled = document.getElementById("monitoring-live").checked;
      if (!enabled) {
        attention.confirm({
          html: "Are you sure you want to disable live monitoring?",
          callback: function (result) {
            if (result) {
              updateSystemPref("monitoring_live", "0")
              toggleMonitoring(false);
            } else {
              document.getElementById("monitoring-live").checked = true;
            }
          }
        })
      } else {
        updateSystemPref("monitoring_live", "1")
        toggleMonitoring(true);
      }
    })
  });

  function updateSystemPref(prefName, prefValue) {
    let formData = new FormData();
    formData.append("pref_name", prefName);
    formData.append("pref_value", prefValue);
    formData.append("csrf_token", "{{.CSRFToken}}");

    let ajax = new XMLHttpRequest();
    ajax.responseType = "json";
    ajax.open("POST", "/admin/preferences/ajax/set-system-pref");
    ajax.send(formData);

    ajax.onreadystatechange = function () {
      if (ajax.readyState === XMLHttpRequest.DONE) {
        let response = ajax.response;
        if (!response.ok) {
          errorAlert(response.message);
        }
      }
    }
  }

  function toggleMonitoring(enabled) {
    let formData = new FormData();
    formData.append("enabled", enabled);
    formData.append("csrf_token", "{{.CSRFToken}}");

    let ajax = new XMLHttpRequest();
    ajax.responseType = "json";
    ajax.open("POST", "/admin/preferences/ajax/toggle-monitoring");
    ajax.send(formData);

    ajax.onreadystatechange = function () {
      if (ajax.readyState === XMLHttpRequest.DONE) {
        let response = ajax.response;
        if (!response.ok) {
          errorAlert(response.message);
        }
      }
    }
  }

</script>
